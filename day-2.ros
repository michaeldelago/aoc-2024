#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '(serapeum) :silent t)
  )

(defpackage :ros.script.day-2.3942822529
  (:use :cl))
(in-package :ros.script.day-2.3942822529)

(defun extract-lines (lines)
  (loop for line in lines
        collect (mapcar (alexandria:compose #'parse-integer #'string) (uiop:split-string line))))


(defun count-unsafe-report (report )
  (let* ((direction (if (< (car report) (cadr report))
                        (lambda (x) (> x 0))
                        (lambda (x) (< x 0))))
         (unsafe-incr (lambda (x) (if (> (abs x) 3)
                                      (abs x)
                                      0)))
         (deltas (cdr (serapeum:deltas report)))
         (unsafe-increments (reduce #'+ (mapcar unsafe-incr deltas) ))
         (unsafe-direction-change (count nil (mapcar direction deltas))))
    (+ unsafe-increments
       unsafe-direction-change)))

(defun part-1 (lines)
  (count 0 (mapcar #'count-unsafe-report (extract-lines lines))))

(defun remove-nth (n ls)
  (loop for x from 0
        for item in ls
        unless (eql x n)
          collect item))

(defun brute-remove-one (report)
  (loop for i from 0
        for x in report
        minimizing (count-unsafe-report (remove-nth i report))))

(defun part-2 (lines)
  (count 0 (mapcar #'brute-remove-one (extract-lines lines))))

;; (part-2 '("1 3 6 7 9"))
;; (part-2 '("1 2 7 8 9"))
;; (part-2 '("9 7 6 2 1"))

(defun main (&rest argv)
  (format t "day 2 part 1: ~a~%day 2 part 2: ~a"
          (part-1 (uiop:read-file-lines (car argv)))
          (part-2 (uiop:read-file-lines (car argv)))))

(loop for (x y z) on '(0 1 2 3 4 5)
      collect (list x y z))

;;; vim: set ft=lisp lisp:
